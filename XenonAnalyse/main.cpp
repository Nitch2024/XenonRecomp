#include <cassert>
#include <iterator>
#include <file.h>
#include <disasm.h>
#include <image.h>
#include <xbox.h>
#include <fmt/core.h>
#include "function.h"

#define SWITCH_ABSOLUTE 0
#define SWITCH_COMPUTED 1
#define SWITCH_BYTEOFFSET 2
#define SWITCH_SHORTOFFSET 3

const char* OpcodeToName[] = { "INVALID",
"PPC_INST_ATTN",
"PPC_INST_TDLGTI",
"PPC_INST_TDLLTI",
"PPC_INST_TDEQI",
"PPC_INST_TDLGEI",
"PPC_INST_TDLNLI",
"PPC_INST_TDLLEI",
"PPC_INST_TDLNGI",
"PPC_INST_TDGTI",
"PPC_INST_TDGEI",
"PPC_INST_TDNLI",
"PPC_INST_TDLTI",
"PPC_INST_TDLEI",
"PPC_INST_TDNGI",
"PPC_INST_TDNEI",
"PPC_INST_TDI",
"PPC_INST_TWLGTI",
"PPC_INST_TLGTI",
"PPC_INST_TWLLTI",
"PPC_INST_TLLTI",
"PPC_INST_TWEQI",
"PPC_INST_TEQI",
"PPC_INST_TWLGEI",
"PPC_INST_TLGEI",
"PPC_INST_TWLNLI",
"PPC_INST_TLNLI",
"PPC_INST_TWLLEI",
"PPC_INST_TLLEI",
"PPC_INST_TWLNGI",
"PPC_INST_TLNGI",
"PPC_INST_TWGTI",
"PPC_INST_TGTI",
"PPC_INST_TWGEI",
"PPC_INST_TGEI",
"PPC_INST_TWNLI",
"PPC_INST_TNLI",
"PPC_INST_TWLTI",
"PPC_INST_TLTI",
"PPC_INST_TWLEI",
"PPC_INST_TLEI",
"PPC_INST_TWNGI",
"PPC_INST_TNGI",
"PPC_INST_TWNEI",
"PPC_INST_TNEI",
"PPC_INST_TWI",
"PPC_INST_TI",
"PPC_INST_MACCHW",
"PPC_INST_MACCHWO",
"PPC_INST_MACCHWS",
"PPC_INST_MACCHWSO",
"PPC_INST_MACCHWSU",
"PPC_INST_MACCHWSUO",
"PPC_INST_MACCHWU",
"PPC_INST_MACCHWUO",
"PPC_INST_MACHHW",
"PPC_INST_MACHHWO",
"PPC_INST_MACHHWS",
"PPC_INST_MACHHWSO",
"PPC_INST_MACHHWSU",
"PPC_INST_MACHHWSUO",
"PPC_INST_MACHHWU",
"PPC_INST_MACHHWUO",
"PPC_INST_MACLHW",
"PPC_INST_MACLHWO",
"PPC_INST_MACLHWS",
"PPC_INST_MACLHWSO",
"PPC_INST_MACLHWSU",
"PPC_INST_MACLHWSUO",
"PPC_INST_MACLHWU",
"PPC_INST_MACLHWUO",
"PPC_INST_MULCHW",
"PPC_INST_MULCHWU",
"PPC_INST_MULHHW",
"PPC_INST_MULHHWU",
"PPC_INST_MULLHW",
"PPC_INST_MULLHWU",
"PPC_INST_NMACCHW",
"PPC_INST_NMACCHWO",
"PPC_INST_NMACCHWS",
"PPC_INST_NMACCHWSO",
"PPC_INST_NMACHHW",
"PPC_INST_NMACHHWO",
"PPC_INST_NMACHHWS",
"PPC_INST_NMACHHWSO",
"PPC_INST_NMACLHW",
"PPC_INST_NMACLHWO",
"PPC_INST_NMACLHWS",
"PPC_INST_NMACLHWSO",
"PPC_INST_MFVSCR",
"PPC_INST_MTVSCR",
"PPC_INST_EFSCFD",
"PPC_INST_EFDABS",
"PPC_INST_EFDNABS",
"PPC_INST_EFDNEG",
"PPC_INST_EFDADD",
"PPC_INST_EFDSUB",
"PPC_INST_EFDMUL",
"PPC_INST_EFDDIV",
"PPC_INST_EFDCMPGT",
"PPC_INST_EFDCMPLT",
"PPC_INST_EFDCMPEQ",
"PPC_INST_EFDTSTGT",
"PPC_INST_EFDTSTLT",
"PPC_INST_EFDTSTEQ",
"PPC_INST_EFDCFSI",
"PPC_INST_EFDCFSID",
"PPC_INST_EFDCFUI",
"PPC_INST_EFDCFUID",
"PPC_INST_EFDCFSF",
"PPC_INST_EFDCFUF",
"PPC_INST_EFDCTSI",
"PPC_INST_EFDCTSIDZ",
"PPC_INST_EFDCTSIZ",
"PPC_INST_EFDCTUI",
"PPC_INST_EFDCTUIDZ",
"PPC_INST_EFDCTUIZ",
"PPC_INST_EFDCTSF",
"PPC_INST_EFDCTUF",
"PPC_INST_EFDCFS",
"PPC_INST_VADDCUW",
"PPC_INST_VADDFP",
"PPC_INST_VADDSBS",
"PPC_INST_VADDSHS",
"PPC_INST_VADDSWS",
"PPC_INST_VADDUBM",
"PPC_INST_VADDUBS",
"PPC_INST_VADDUHM",
"PPC_INST_VADDUHS",
"PPC_INST_VADDUWM",
"PPC_INST_VADDUWS",
"PPC_INST_VAND",
"PPC_INST_VANDC",
"PPC_INST_VAVGSB",
"PPC_INST_VAVGSH",
"PPC_INST_VAVGSW",
"PPC_INST_VAVGUB",
"PPC_INST_VAVGUH",
"PPC_INST_VAVGUW",
"PPC_INST_VCFSX",
"PPC_INST_VCFUX",
"PPC_INST_VCMPBFP",
"PPC_INST_VCMPEQFP",
"PPC_INST_VCMPEQUB",
"PPC_INST_VCMPEQUH",
"PPC_INST_VCMPEQUW",
"PPC_INST_VCMPGEFP",
"PPC_INST_VCMPGTFP",
"PPC_INST_VCMPGTSB",
"PPC_INST_VCMPGTSH",
"PPC_INST_VCMPGTSW",
"PPC_INST_VCMPGTUB",
"PPC_INST_VCMPGTUH",
"PPC_INST_VCMPGTUW",
"PPC_INST_VCTSXS",
"PPC_INST_VCTUXS",
"PPC_INST_VEXPTEFP",
"PPC_INST_VLOGEFP",
"PPC_INST_VMADDFP",
"PPC_INST_VMAXFP",
"PPC_INST_VMAXSB",
"PPC_INST_VMAXSH",
"PPC_INST_VMAXSW",
"PPC_INST_VMAXUB",
"PPC_INST_VMAXUH",
"PPC_INST_VMAXUW",
"PPC_INST_VMHADDSHS",
"PPC_INST_VMHRADDSHS",
"PPC_INST_VMINFP",
"PPC_INST_VMINSB",
"PPC_INST_VMINSH",
"PPC_INST_VMINSW",
"PPC_INST_VMINUB",
"PPC_INST_VMINUH",
"PPC_INST_VMINUW",
"PPC_INST_VMLADDUHM",
"PPC_INST_VMRGHB",
"PPC_INST_VMRGHH",
"PPC_INST_VMRGHW",
"PPC_INST_VMRGLB",
"PPC_INST_VMRGLH",
"PPC_INST_VMRGLW",
"PPC_INST_VMSUMMBM",
"PPC_INST_VMSUMSHM",
"PPC_INST_VMSUMSHS",
"PPC_INST_VMSUMUBM",
"PPC_INST_VMSUMUHM",
"PPC_INST_VMSUMUHS",
"PPC_INST_VMULESB",
"PPC_INST_VMULESH",
"PPC_INST_VMULEUB",
"PPC_INST_VMULEUH",
"PPC_INST_VMULOSB",
"PPC_INST_VMULOSH",
"PPC_INST_VMULOUB",
"PPC_INST_VMULOUH",
"PPC_INST_VNMSUBFP",
"PPC_INST_VNOR",
"PPC_INST_VOR",
"PPC_INST_VPERM",
"PPC_INST_VPKPX",
"PPC_INST_VPKSHSS",
"PPC_INST_VPKSHUS",
"PPC_INST_VPKSWSS",
"PPC_INST_VPKSWUS",
"PPC_INST_VPKUHUM",
"PPC_INST_VPKUHUS",
"PPC_INST_VPKUWUM",
"PPC_INST_VPKUWUS",
"PPC_INST_VREFP",
"PPC_INST_VRFIM",
"PPC_INST_VRFIN",
"PPC_INST_VRFIP",
"PPC_INST_VRFIZ",
"PPC_INST_VRLB",
"PPC_INST_VRLH",
"PPC_INST_VRLW",
"PPC_INST_VRSQRTEFP",
"PPC_INST_VSEL",
"PPC_INST_VSL",
"PPC_INST_VSLB",
"PPC_INST_VSLDOI",
"PPC_INST_VSLH",
"PPC_INST_VSLO",
"PPC_INST_VSLW",
"PPC_INST_VSPLTB",
"PPC_INST_VSPLTH",
"PPC_INST_VSPLTISB",
"PPC_INST_VSPLTISH",
"PPC_INST_VSPLTISW",
"PPC_INST_VSPLTW",
"PPC_INST_VSR",
"PPC_INST_VSRAB",
"PPC_INST_VSRAH",
"PPC_INST_VSRAW",
"PPC_INST_VSRB",
"PPC_INST_VSRH",
"PPC_INST_VSRO",
"PPC_INST_VSRW",
"PPC_INST_VSUBCUW",
"PPC_INST_VSUBFP",
"PPC_INST_VSUBSBS",
"PPC_INST_VSUBSHS",
"PPC_INST_VSUBSWS",
"PPC_INST_VSUBUBM",
"PPC_INST_VSUBUBS",
"PPC_INST_VSUBUHM",
"PPC_INST_VSUBUHS",
"PPC_INST_VSUBUWM",
"PPC_INST_VSUBUWS",
"PPC_INST_VSUMSWS",
"PPC_INST_VSUM2SWS",
"PPC_INST_VSUM4SBS",
"PPC_INST_VSUM4SHS",
"PPC_INST_VSUM4UBS",
"PPC_INST_VUPKHPX",
"PPC_INST_VUPKHSB",
"PPC_INST_VUPKHSH",
"PPC_INST_VUPKLPX",
"PPC_INST_VUPKLSB",
"PPC_INST_VUPKLSH",
"PPC_INST_VXOR",
"PPC_INST_VSLDOI128",
"PPC_INST_LVSL128",
"PPC_INST_LVSR128",
"PPC_INST_LVEWX128",
"PPC_INST_LVX128",
"PPC_INST_STVEWX128",
"PPC_INST_STVX128",
"PPC_INST_LVXL128",
"PPC_INST_STVXL128",
"PPC_INST_LVLX128",
"PPC_INST_LVRX128",
"PPC_INST_STVLX128",
"PPC_INST_STVRX128",
"PPC_INST_LVLXL128",
"PPC_INST_LVRXL128",
"PPC_INST_STVLXL128",
"PPC_INST_STVRXL128",
"PPC_INST_VPERM128",
"PPC_INST_VADDFP128",
"PPC_INST_VSUBFP128",
"PPC_INST_VMULFP128",
"PPC_INST_VMADDFP128",
"PPC_INST_VMADDCFP128",
"PPC_INST_VNMSUBFP128",
"PPC_INST_VMSUM3FP128",
"PPC_INST_VMSUM4FP128",
"PPC_INST_VPKSHSS128",
"PPC_INST_VAND128",
"PPC_INST_VPKSHUS128",
"PPC_INST_VANDC128",
"PPC_INST_VPKSWSS128",
"PPC_INST_VNOR128",
"PPC_INST_VPKSWUS128",
"PPC_INST_VOR128",
"PPC_INST_VPKUHUM128",
"PPC_INST_VXOR128",
"PPC_INST_VPKUHUS128",
"PPC_INST_VSEL128",
"PPC_INST_VPKUWUM128",
"PPC_INST_VSLO128",
"PPC_INST_VPKUWUS128",
"PPC_INST_VSRO128",
"PPC_INST_VPERMWI128",
"PPC_INST_VCFPSXWS128",
"PPC_INST_VCFPUXWS128",
"PPC_INST_VCSXWFP128",
"PPC_INST_VCUXWFP128",
"PPC_INST_VRFIM128",
"PPC_INST_VRFIN128",
"PPC_INST_VRFIP128",
"PPC_INST_VRFIZ128",
"PPC_INST_VPKD3D128",
"PPC_INST_VREFP128",
"PPC_INST_VRSQRTEFP128",
"PPC_INST_VEXPTEFP128",
"PPC_INST_VLOGEFP128",
"PPC_INST_VRLIMI128",
"PPC_INST_VSPLTW128",
"PPC_INST_VSPLTISW128",
"PPC_INST_VUPKD3D128",
"PPC_INST_VCMPEQFP128",
"PPC_INST_VRLW128",
"PPC_INST_VCMPGEFP128",
"PPC_INST_VSLW128",
"PPC_INST_VCMPGTFP128",
"PPC_INST_VSRAW128",
"PPC_INST_VCMPBFP128",
"PPC_INST_VSRW128",
"PPC_INST_VCMPEQUW128",
"PPC_INST_VMAXFP128",
"PPC_INST_VMINFP128",
"PPC_INST_VMRGHW128",
"PPC_INST_VMRGLW128",
"PPC_INST_VUPKHSB128",
"PPC_INST_VUPKLSB128",
"PPC_INST_EVADDW",
"PPC_INST_EVADDIW",
"PPC_INST_EVSUBFW",
"PPC_INST_EVSUBW",
"PPC_INST_EVSUBIFW",
"PPC_INST_EVSUBIW",
"PPC_INST_EVABS",
"PPC_INST_EVNEG",
"PPC_INST_EVEXTSB",
"PPC_INST_EVEXTSH",
"PPC_INST_EVRNDW",
"PPC_INST_EVCNTLZW",
"PPC_INST_EVCNTLSW",
"PPC_INST_BRINC",
"PPC_INST_EVAND",
"PPC_INST_EVANDC",
"PPC_INST_EVMR",
"PPC_INST_EVOR",
"PPC_INST_EVORC",
"PPC_INST_EVXOR",
"PPC_INST_EVEQV",
"PPC_INST_EVNAND",
"PPC_INST_EVNOT",
"PPC_INST_EVNOR",
"PPC_INST_EVRLW",
"PPC_INST_EVRLWI",
"PPC_INST_EVSLW",
"PPC_INST_EVSLWI",
"PPC_INST_EVSRWS",
"PPC_INST_EVSRWU",
"PPC_INST_EVSRWIS",
"PPC_INST_EVSRWIU",
"PPC_INST_EVSPLATI",
"PPC_INST_EVSPLATFI",
"PPC_INST_EVMERGEHI",
"PPC_INST_EVMERGELO",
"PPC_INST_EVMERGEHILO",
"PPC_INST_EVMERGELOHI",
"PPC_INST_EVCMPGTS",
"PPC_INST_EVCMPGTU",
"PPC_INST_EVCMPLTS",
"PPC_INST_EVCMPLTU",
"PPC_INST_EVCMPEQ",
"PPC_INST_EVSEL",
"PPC_INST_EVLDD",
"PPC_INST_EVLDDX",
"PPC_INST_EVLDW",
"PPC_INST_EVLDWX",
"PPC_INST_EVLDH",
"PPC_INST_EVLDHX",
"PPC_INST_EVLWHE",
"PPC_INST_EVLWHEX",
"PPC_INST_EVLWHOU",
"PPC_INST_EVLWHOUX",
"PPC_INST_EVLWHOS",
"PPC_INST_EVLWHOSX",
"PPC_INST_EVLWWSPLAT",
"PPC_INST_EVLWWSPLATX",
"PPC_INST_EVLWHSPLAT",
"PPC_INST_EVLWHSPLATX",
"PPC_INST_EVLHHESPLAT",
"PPC_INST_EVLHHESPLATX",
"PPC_INST_EVLHHOUSPLAT",
"PPC_INST_EVLHHOUSPLATX",
"PPC_INST_EVLHHOSSPLAT",
"PPC_INST_EVLHHOSSPLATX",
"PPC_INST_EVSTDD",
"PPC_INST_EVSTDDX",
"PPC_INST_EVSTDW",
"PPC_INST_EVSTDWX",
"PPC_INST_EVSTDH",
"PPC_INST_EVSTDHX",
"PPC_INST_EVSTWWE",
"PPC_INST_EVSTWWEX",
"PPC_INST_EVSTWWO",
"PPC_INST_EVSTWWOX",
"PPC_INST_EVSTWHE",
"PPC_INST_EVSTWHEX",
"PPC_INST_EVSTWHO",
"PPC_INST_EVSTWHOX",
"PPC_INST_EVFSABS",
"PPC_INST_EVFSNABS",
"PPC_INST_EVFSNEG",
"PPC_INST_EVFSADD",
"PPC_INST_EVFSSUB",
"PPC_INST_EVFSMUL",
"PPC_INST_EVFSDIV",
"PPC_INST_EVFSCMPGT",
"PPC_INST_EVFSCMPLT",
"PPC_INST_EVFSCMPEQ",
"PPC_INST_EVFSTSTGT",
"PPC_INST_EVFSTSTLT",
"PPC_INST_EVFSTSTEQ",
"PPC_INST_EVFSCFUI",
"PPC_INST_EVFSCTUIZ",
"PPC_INST_EVFSCFSI",
"PPC_INST_EVFSCFUF",
"PPC_INST_EVFSCFSF",
"PPC_INST_EVFSCTUI",
"PPC_INST_EVFSCTSI",
"PPC_INST_EVFSCTSIZ",
"PPC_INST_EVFSCTUF",
"PPC_INST_EVFSCTSF",
"PPC_INST_EFSABS",
"PPC_INST_EFSNABS",
"PPC_INST_EFSNEG",
"PPC_INST_EFSADD",
"PPC_INST_EFSSUB",
"PPC_INST_EFSMUL",
"PPC_INST_EFSDIV",
"PPC_INST_EFSCMPGT",
"PPC_INST_EFSCMPLT",
"PPC_INST_EFSCMPEQ",
"PPC_INST_EFSTSTGT",
"PPC_INST_EFSTSTLT",
"PPC_INST_EFSTSTEQ",
"PPC_INST_EFSCFUI",
"PPC_INST_EFSCTUIZ",
"PPC_INST_EFSCFSI",
"PPC_INST_EFSCFUF",
"PPC_INST_EFSCFSF",
"PPC_INST_EFSCTUI",
"PPC_INST_EFSCTSI",
"PPC_INST_EFSCTSIZ",
"PPC_INST_EFSCTUF",
"PPC_INST_EFSCTSF",
"PPC_INST_EVMHOSSF",
"PPC_INST_EVMHOSSFA",
"PPC_INST_EVMHOSMF",
"PPC_INST_EVMHOSMFA",
"PPC_INST_EVMHOSMI",
"PPC_INST_EVMHOSMIA",
"PPC_INST_EVMHOUMI",
"PPC_INST_EVMHOUMIA",
"PPC_INST_EVMHESSF",
"PPC_INST_EVMHESSFA",
"PPC_INST_EVMHESMF",
"PPC_INST_EVMHESMFA",
"PPC_INST_EVMHESMI",
"PPC_INST_EVMHESMIA",
"PPC_INST_EVMHEUMI",
"PPC_INST_EVMHEUMIA",
"PPC_INST_EVMHOSSFAAW",
"PPC_INST_EVMHOSSIAAW",
"PPC_INST_EVMHOSMFAAW",
"PPC_INST_EVMHOSMIAAW",
"PPC_INST_EVMHOUSIAAW",
"PPC_INST_EVMHOUMIAAW",
"PPC_INST_EVMHESSFAAW",
"PPC_INST_EVMHESSIAAW",
"PPC_INST_EVMHESMFAAW",
"PPC_INST_EVMHESMIAAW",
"PPC_INST_EVMHEUSIAAW",
"PPC_INST_EVMHEUMIAAW",
"PPC_INST_EVMHOSSFANW",
"PPC_INST_EVMHOSSIANW",
"PPC_INST_EVMHOSMFANW",
"PPC_INST_EVMHOSMIANW",
"PPC_INST_EVMHOUSIANW",
"PPC_INST_EVMHOUMIANW",
"PPC_INST_EVMHESSFANW",
"PPC_INST_EVMHESSIANW",
"PPC_INST_EVMHESMFANW",
"PPC_INST_EVMHESMIANW",
"PPC_INST_EVMHEUSIANW",
"PPC_INST_EVMHEUMIANW",
"PPC_INST_EVMHOGSMFAA",
"PPC_INST_EVMHOGSMIAA",
"PPC_INST_EVMHOGUMIAA",
"PPC_INST_EVMHEGSMFAA",
"PPC_INST_EVMHEGSMIAA",
"PPC_INST_EVMHEGUMIAA",
"PPC_INST_EVMHOGSMFAN",
"PPC_INST_EVMHOGSMIAN",
"PPC_INST_EVMHOGUMIAN",
"PPC_INST_EVMHEGSMFAN",
"PPC_INST_EVMHEGSMIAN",
"PPC_INST_EVMHEGUMIAN",
"PPC_INST_EVMWHSSF",
"PPC_INST_EVMWHSSFA",
"PPC_INST_EVMWHSMF",
"PPC_INST_EVMWHSMFA",
"PPC_INST_EVMWHSMI",
"PPC_INST_EVMWHSMIA",
"PPC_INST_EVMWHUMI",
"PPC_INST_EVMWHUMIA",
"PPC_INST_EVMWLUMI",
"PPC_INST_EVMWLUMIA",
"PPC_INST_EVMWLSSIAAW",
"PPC_INST_EVMWLSMIAAW",
"PPC_INST_EVMWLUSIAAW",
"PPC_INST_EVMWLUMIAAW",
"PPC_INST_EVMWLSSIANW",
"PPC_INST_EVMWLSMIANW",
"PPC_INST_EVMWLUSIANW",
"PPC_INST_EVMWLUMIANW",
"PPC_INST_EVMWSSF",
"PPC_INST_EVMWSSFA",
"PPC_INST_EVMWSMF",
"PPC_INST_EVMWSMFA",
"PPC_INST_EVMWSMI",
"PPC_INST_EVMWSMIA",
"PPC_INST_EVMWUMI",
"PPC_INST_EVMWUMIA",
"PPC_INST_EVMWSSFAA",
"PPC_INST_EVMWSMFAA",
"PPC_INST_EVMWSMIAA",
"PPC_INST_EVMWUMIAA",
"PPC_INST_EVMWSSFAN",
"PPC_INST_EVMWSMFAN",
"PPC_INST_EVMWSMIAN",
"PPC_INST_EVMWUMIAN",
"PPC_INST_EVADDSSIAAW",
"PPC_INST_EVADDSMIAAW",
"PPC_INST_EVADDUSIAAW",
"PPC_INST_EVADDUMIAAW",
"PPC_INST_EVSUBFSSIAAW",
"PPC_INST_EVSUBFSMIAAW",
"PPC_INST_EVSUBFUSIAAW",
"PPC_INST_EVSUBFUMIAAW",
"PPC_INST_EVMRA",
"PPC_INST_EVDIVWS",
"PPC_INST_EVDIVWU",
"PPC_INST_MULLI",
"PPC_INST_MULI",
"PPC_INST_SUBFIC",
"PPC_INST_SFI",
"PPC_INST_DOZI",
"PPC_INST_BCE",
"PPC_INST_BCEL",
"PPC_INST_BCEA",
"PPC_INST_BCELA",
"PPC_INST_CMPLWI",
"PPC_INST_CMPLDI",
"PPC_INST_CMPLI",
"PPC_INST_CMPWI",
"PPC_INST_CMPDI",
"PPC_INST_CMPI",
"PPC_INST_ADDIC",
"PPC_INST_AI",
"PPC_INST_SUBIC",
"PPC_INST_LI",
"PPC_INST_LIL",
"PPC_INST_ADDI",
"PPC_INST_CAL",
"PPC_INST_SUBI",
"PPC_INST_LA",
"PPC_INST_LIS",
"PPC_INST_LIU",
"PPC_INST_ADDIS",
"PPC_INST_CAU",
"PPC_INST_SUBIS",
"PPC_INST_BDNZ",
"PPC_INST_BDN",
"PPC_INST_BDNZL",
"PPC_INST_BDNL",
"PPC_INST_BDNZA",
"PPC_INST_BDNA",
"PPC_INST_BDNZLA",
"PPC_INST_BDNLA",
"PPC_INST_BDZ",
"PPC_INST_BDZL",
"PPC_INST_BDZA",
"PPC_INST_BDZLA",
"PPC_INST_BLT",
"PPC_INST_BLTL",
"PPC_INST_BLTA",
"PPC_INST_BLTLA",
"PPC_INST_BGT",
"PPC_INST_BGTL",
"PPC_INST_BGTA",
"PPC_INST_BGTLA",
"PPC_INST_BEQ",
"PPC_INST_BEQL",
"PPC_INST_BEQA",
"PPC_INST_BEQLA",
"PPC_INST_BSO",
"PPC_INST_BSOL",
"PPC_INST_BSOA",
"PPC_INST_BSOLA",
"PPC_INST_BUN",
"PPC_INST_BUNL",
"PPC_INST_BUNA",
"PPC_INST_BUNLA",
"PPC_INST_BGE",
"PPC_INST_BGEL",
"PPC_INST_BGEA",
"PPC_INST_BGELA",
"PPC_INST_BNL",
"PPC_INST_BNLL",
"PPC_INST_BNLA",
"PPC_INST_BNLLA",
"PPC_INST_BLE",
"PPC_INST_BLEL",
"PPC_INST_BLEA",
"PPC_INST_BLELA",
"PPC_INST_BNG",
"PPC_INST_BNGL",
"PPC_INST_BNGA",
"PPC_INST_BNGLA",
"PPC_INST_BNE",
"PPC_INST_BNEL",
"PPC_INST_BNEA",
"PPC_INST_BNELA",
"PPC_INST_BNS",
"PPC_INST_BNSL",
"PPC_INST_BNSA",
"PPC_INST_BNSLA",
"PPC_INST_BNU",
"PPC_INST_BNUL",
"PPC_INST_BNUA",
"PPC_INST_BNULA",
"PPC_INST_BDNZT",
"PPC_INST_BDNZTL",
"PPC_INST_BDNZTA",
"PPC_INST_BDNZTLA",
"PPC_INST_BDNZF",
"PPC_INST_BDNZFL",
"PPC_INST_BDNZFA",
"PPC_INST_BDNZFLA",
"PPC_INST_BT",
"PPC_INST_BBT",
"PPC_INST_BTL",
"PPC_INST_BBTL",
"PPC_INST_BTA",
"PPC_INST_BBTA",
"PPC_INST_BTLA",
"PPC_INST_BBTLA",
"PPC_INST_BF",
"PPC_INST_BBF",
"PPC_INST_BFL",
"PPC_INST_BBFL",
"PPC_INST_BFA",
"PPC_INST_BBFA",
"PPC_INST_BFLA",
"PPC_INST_BBFLA",
"PPC_INST_BDZT",
"PPC_INST_BDZTL",
"PPC_INST_BDZTA",
"PPC_INST_BDZTLA",
"PPC_INST_BDZF",
"PPC_INST_BDZFL",
"PPC_INST_BDZFA",
"PPC_INST_BDZFLA",
"PPC_INST_BC",
"PPC_INST_BCL",
"PPC_INST_BCA",
"PPC_INST_BCLA",
"PPC_INST_SC",
"PPC_INST_SVC",
"PPC_INST_SVCL",
"PPC_INST_SVCA",
"PPC_INST_SVCLA",
"PPC_INST_B",
"PPC_INST_BL",
"PPC_INST_BA",
"PPC_INST_BLA",
"PPC_INST_MCRF",
"PPC_INST_BLR",
"PPC_INST_BR",
"PPC_INST_BLRL",
"PPC_INST_BRL",
"PPC_INST_BDNZLR",
"PPC_INST_BDNZLRL",
"PPC_INST_BDZLR",
"PPC_INST_BDZLRL",
"PPC_INST_BLTLR",
"PPC_INST_BLTR",
"PPC_INST_BLTLRL",
"PPC_INST_BLTRL",
"PPC_INST_BGTLR",
"PPC_INST_BGTR",
"PPC_INST_BGTLRL",
"PPC_INST_BGTRL",
"PPC_INST_BEQLR",
"PPC_INST_BEQR",
"PPC_INST_BEQLRL",
"PPC_INST_BEQRL",
"PPC_INST_BSOLR",
"PPC_INST_BSOR",
"PPC_INST_BSOLRL",
"PPC_INST_BSORL",
"PPC_INST_BUNLR",
"PPC_INST_BUNLRL",
"PPC_INST_BGELR",
"PPC_INST_BGER",
"PPC_INST_BGELRL",
"PPC_INST_BGERL",
"PPC_INST_BNLLR",
"PPC_INST_BNLR",
"PPC_INST_BNLLRL",
"PPC_INST_BNLRL",
"PPC_INST_BLELR",
"PPC_INST_BLER",
"PPC_INST_BLELRL",
"PPC_INST_BLERL",
"PPC_INST_BNGLR",
"PPC_INST_BNGR",
"PPC_INST_BNGLRL",
"PPC_INST_BNGRL",
"PPC_INST_BNELR",
"PPC_INST_BNER",
"PPC_INST_BNELRL",
"PPC_INST_BNERL",
"PPC_INST_BNSLR",
"PPC_INST_BNSR",
"PPC_INST_BNSLRL",
"PPC_INST_BNSRL",
"PPC_INST_BNULR",
"PPC_INST_BNULRL",
"PPC_INST_BTLR",
"PPC_INST_BBTR",
"PPC_INST_BTLRL",
"PPC_INST_BBTRL",
"PPC_INST_BFLR",
"PPC_INST_BBFR",
"PPC_INST_BFLRL",
"PPC_INST_BBFRL",
"PPC_INST_BDNZTLR",
"PPC_INST_BDNZTLRL",
"PPC_INST_BDNZFLR",
"PPC_INST_BDNZFLRL",
"PPC_INST_BDZTLR",
"PPC_INST_BDZTLRL",
"PPC_INST_BDZFLR",
"PPC_INST_BDZFLRL",
"PPC_INST_BCLR",
"PPC_INST_BCLRL",
"PPC_INST_BCR",
"PPC_INST_BCRL",
"PPC_INST_BCLRE",
"PPC_INST_BCLREL",
"PPC_INST_RFID",
"PPC_INST_CRNOT",
"PPC_INST_CRNOR",
"PPC_INST_RFMCI",
"PPC_INST_RFI",
"PPC_INST_RFCI",
"PPC_INST_RFSVC",
"PPC_INST_CRANDC",
"PPC_INST_ISYNC",
"PPC_INST_ICS",
"PPC_INST_CRCLR",
"PPC_INST_CRXOR",
"PPC_INST_CRNAND",
"PPC_INST_CRAND",
"PPC_INST_HRFID",
"PPC_INST_CRSET",
"PPC_INST_CREQV",
"PPC_INST_DOZE",
"PPC_INST_CRORC",
"PPC_INST_NAP",
"PPC_INST_CRMOVE",
"PPC_INST_CROR",
"PPC_INST_SLEEP",
"PPC_INST_RVWINKLE",
"PPC_INST_BCTR",
"PPC_INST_BCTRL",
"PPC_INST_BLTCTR",
"PPC_INST_BLTCTRL",
"PPC_INST_BGTCTR",
"PPC_INST_BGTCTRL",
"PPC_INST_BEQCTR",
"PPC_INST_BEQCTRL",
"PPC_INST_BSOCTR",
"PPC_INST_BSOCTRL",
"PPC_INST_BUNCTR",
"PPC_INST_BUNCTRL",
"PPC_INST_BGECTR",
"PPC_INST_BGECTRL",
"PPC_INST_BNLCTR",
"PPC_INST_BNLCTRL",
"PPC_INST_BLECTR",
"PPC_INST_BLECTRL",
"PPC_INST_BNGCTR",
"PPC_INST_BNGCTRL",
"PPC_INST_BNECTR",
"PPC_INST_BNECTRL",
"PPC_INST_BNSCTR",
"PPC_INST_BNSCTRL",
"PPC_INST_BNUCTR",
"PPC_INST_BNUCTRL",
"PPC_INST_BTCTR",
"PPC_INST_BTCTRL",
"PPC_INST_BFCTR",
"PPC_INST_BFCTRL",
"PPC_INST_BCCTR",
"PPC_INST_BCCTRL",
"PPC_INST_BCC",
"PPC_INST_BCCL",
"PPC_INST_BCCTRE",
"PPC_INST_BCCTREL",
"PPC_INST_RLWIMI",
"PPC_INST_RLIMI",
"PPC_INST_ROTLWI",
"PPC_INST_CLRLWI",
"PPC_INST_RLWINM",
"PPC_INST_RLINM",
"PPC_INST_RLMI",
"PPC_INST_BE",
"PPC_INST_BEL",
"PPC_INST_BEA",
"PPC_INST_BELA",
"PPC_INST_ROTLW",
"PPC_INST_RLWNM",
"PPC_INST_RLNM",
"PPC_INST_NOP",
"PPC_INST_ORI",
"PPC_INST_ORIL",
"PPC_INST_ORIS",
"PPC_INST_ORIU",
"PPC_INST_XORI",
"PPC_INST_XORIL",
"PPC_INST_XORIS",
"PPC_INST_XORIU",
"PPC_INST_ANDI",
"PPC_INST_ANDIL",
"PPC_INST_ANDIS",
"PPC_INST_ANDIU",
"PPC_INST_ROTLDI",
"PPC_INST_CLRLDI",
"PPC_INST_RLDICL",
"PPC_INST_RLDICR",
"PPC_INST_RLDIC",
"PPC_INST_RLDIMI",
"PPC_INST_ROTLD",
"PPC_INST_RLDCL",
"PPC_INST_RLDCR",
"PPC_INST_CMPW",
"PPC_INST_CMPD",
"PPC_INST_CMP",
"PPC_INST_TWLGT",
"PPC_INST_TLGT",
"PPC_INST_TWLLT",
"PPC_INST_TLLT",
"PPC_INST_TWEQ",
"PPC_INST_TEQ",
"PPC_INST_TWLGE",
"PPC_INST_TLGE",
"PPC_INST_TWLNL",
"PPC_INST_TLNL",
"PPC_INST_TWLLE",
"PPC_INST_TLLE",
"PPC_INST_TWLNG",
"PPC_INST_TLNG",
"PPC_INST_TWGT",
"PPC_INST_TGT",
"PPC_INST_TWGE",
"PPC_INST_TGE",
"PPC_INST_TWNL",
"PPC_INST_TNL",
"PPC_INST_TWLT",
"PPC_INST_TLT",
"PPC_INST_TWLE",
"PPC_INST_TLE",
"PPC_INST_TWNG",
"PPC_INST_TNG",
"PPC_INST_TWNE",
"PPC_INST_TNE",
"PPC_INST_TRAP",
"PPC_INST_TW",
"PPC_INST_T",
"PPC_INST_SUBFC",
"PPC_INST_SF",
"PPC_INST_SUBC",
"PPC_INST_SUBFCO",
"PPC_INST_SFO",
"PPC_INST_SUBCO",
"PPC_INST_MULHDU",
"PPC_INST_ADDC",
"PPC_INST_A",
"PPC_INST_ADDCO",
"PPC_INST_AO",
"PPC_INST_MULHWU",
"PPC_INST_ISELLT",
"PPC_INST_ISELGT",
"PPC_INST_ISELEQ",
"PPC_INST_ISEL",
"PPC_INST_MFOCRF",
"PPC_INST_MFCR",
"PPC_INST_LWARX",
"PPC_INST_LDX",
"PPC_INST_ICBT",
"PPC_INST_LWZX",
"PPC_INST_LX",
"PPC_INST_SLW",
"PPC_INST_SL",
"PPC_INST_CNTLZW",
"PPC_INST_CNTLZ",
"PPC_INST_SLD",
"PPC_INST_AND",
"PPC_INST_MASKG",
"PPC_INST_ICBTE",
"PPC_INST_LWZXE",
"PPC_INST_CMPLW",
"PPC_INST_CMPLD",
"PPC_INST_CMPL",
"PPC_INST_SUBF",
"PPC_INST_SUB",
"PPC_INST_SUBFO",
"PPC_INST_SUBO",
"PPC_INST_LDUX",
"PPC_INST_DCBST",
"PPC_INST_LWZUX",
"PPC_INST_LUX",
"PPC_INST_DCBSTE",
"PPC_INST_LWZUXE",
"PPC_INST_CNTLZD",
"PPC_INST_ANDC",
"PPC_INST_TDLGT",
"PPC_INST_TDLLT",
"PPC_INST_TDEQ",
"PPC_INST_TDLGE",
"PPC_INST_TDLNL",
"PPC_INST_TDLLE",
"PPC_INST_TDLNG",
"PPC_INST_TDGT",
"PPC_INST_TDGE",
"PPC_INST_TDNL",
"PPC_INST_TDLT",
"PPC_INST_TDLE",
"PPC_INST_TDNG",
"PPC_INST_TDNE",
"PPC_INST_TD",
"PPC_INST_MULHD",
"PPC_INST_MULHW",
"PPC_INST_DLMZB",
"PPC_INST_MTSRD",
"PPC_INST_MFMSR",
"PPC_INST_LDARX",
"PPC_INST_DCBFL",
"PPC_INST_DCBF",
"PPC_INST_LBZX",
"PPC_INST_DCBFE",
"PPC_INST_LBZXE",
"PPC_INST_NEG",
"PPC_INST_NEGO",
"PPC_INST_MUL",
"PPC_INST_MULO",
"PPC_INST_MTSRDIN",
"PPC_INST_CLF",
"PPC_INST_LBZUX",
"PPC_INST_POPCNTB",
"PPC_INST_NOT",
"PPC_INST_NOR",
"PPC_INST_LWARXE",
"PPC_INST_LBZUXE",
"PPC_INST_WRTEE",
"PPC_INST_DCBTSTLS",
"PPC_INST_SUBFE",
"PPC_INST_SFE",
"PPC_INST_SUBFEO",
"PPC_INST_SFEO",
"PPC_INST_ADDE",
"PPC_INST_AE",
"PPC_INST_ADDEO",
"PPC_INST_AEO",
"PPC_INST_DCBTSTLSE",
"PPC_INST_MTOCRF",
"PPC_INST_MTCR",
"PPC_INST_MTCRF",
"PPC_INST_MTMSR",
"PPC_INST_STDX",
"PPC_INST_STWCX",
"PPC_INST_STWX",
"PPC_INST_STX",
"PPC_INST_STWCXE",
"PPC_INST_STWXE",
"PPC_INST_SLQ",
"PPC_INST_SLE",
"PPC_INST_PRTYW",
"PPC_INST_WRTEEI",
"PPC_INST_DCBTLS",
"PPC_INST_DCBTLSE",
"PPC_INST_MTMSRD",
"PPC_INST_STDUX",
"PPC_INST_STWUX",
"PPC_INST_STUX",
"PPC_INST_SLIQ",
"PPC_INST_PRTYD",
"PPC_INST_STWUXE",
"PPC_INST_SUBFZE",
"PPC_INST_SFZE",
"PPC_INST_SUBFZEO",
"PPC_INST_SFZEO",
"PPC_INST_ADDZE",
"PPC_INST_AZE",
"PPC_INST_ADDZEO",
"PPC_INST_AZEO",
"PPC_INST_MTSR",
"PPC_INST_STDCX",
"PPC_INST_STBX",
"PPC_INST_SLLQ",
"PPC_INST_SLEQ",
"PPC_INST_STBXE",
"PPC_INST_ICBLC",
"PPC_INST_SUBFME",
"PPC_INST_SFME",
"PPC_INST_SUBFMEO",
"PPC_INST_SFMEO",
"PPC_INST_MULLD",
"PPC_INST_MULLDO",
"PPC_INST_ADDME",
"PPC_INST_AME",
"PPC_INST_ADDMEO",
"PPC_INST_AMEO",
"PPC_INST_MULLW",
"PPC_INST_MULS",
"PPC_INST_MULLWO",
"PPC_INST_MULSO",
"PPC_INST_ICBLCE",
"PPC_INST_MTSRIN",
"PPC_INST_MTSRI",
"PPC_INST_DCBTST",
"PPC_INST_STBUX",
"PPC_INST_SLLIQ",
"PPC_INST_DCBTSTE",
"PPC_INST_STBUXE",
"PPC_INST_MFDCRX",
"PPC_INST_DOZ",
"PPC_INST_DOZO",
"PPC_INST_ADD",
"PPC_INST_CAX",
"PPC_INST_ADDO",
"PPC_INST_CAXO",
"PPC_INST_TLBIEL",
"PPC_INST_MFAPIDI",
"PPC_INST_LSCBX",
"PPC_INST_DCBT",
"PPC_INST_LHZX",
"PPC_INST_EQV",
"PPC_INST_DCBTE",
"PPC_INST_LHZXE",
"PPC_INST_TLBIE",
"PPC_INST_TLBI",
"PPC_INST_ECIWX",
"PPC_INST_LHZUX",
"PPC_INST_XOR",
"PPC_INST_LHZUXE",
"PPC_INST_MFEXISR",
"PPC_INST_MFEXIER",
"PPC_INST_MFBR0",
"PPC_INST_MFBR1",
"PPC_INST_MFBR2",
"PPC_INST_MFBR3",
"PPC_INST_MFBR4",
"PPC_INST_MFBR5",
"PPC_INST_MFBR6",
"PPC_INST_MFBR7",
"PPC_INST_MFBEAR",
"PPC_INST_MFBESR",
"PPC_INST_MFIOCR",
"PPC_INST_MFDMACR0",
"PPC_INST_MFDMACT0",
"PPC_INST_MFDMADA0",
"PPC_INST_MFDMASA0",
"PPC_INST_MFDMACC0",
"PPC_INST_MFDMACR1",
"PPC_INST_MFDMACT1",
"PPC_INST_MFDMADA1",
"PPC_INST_MFDMASA1",
"PPC_INST_MFDMACC1",
"PPC_INST_MFDMACR2",
"PPC_INST_MFDMACT2",
"PPC_INST_MFDMADA2",
"PPC_INST_MFDMASA2",
"PPC_INST_MFDMACC2",
"PPC_INST_MFDMACR3",
"PPC_INST_MFDMACT3",
"PPC_INST_MFDMADA3",
"PPC_INST_MFDMASA3",
"PPC_INST_MFDMACC3",
"PPC_INST_MFDMASR",
"PPC_INST_MFDCR",
"PPC_INST_DIV",
"PPC_INST_DIVO",
"PPC_INST_MFPMR",
"PPC_INST_MFMQ",
"PPC_INST_MFXER",
"PPC_INST_MFRTCU",
"PPC_INST_MFRTCL",
"PPC_INST_MFDEC",
"PPC_INST_MFLR",
"PPC_INST_MFCTR",
"PPC_INST_MFTID",
"PPC_INST_MFDSISR",
"PPC_INST_MFDAR",
"PPC_INST_MFSDR0",
"PPC_INST_MFSDR1",
"PPC_INST_MFSRR0",
"PPC_INST_MFSRR1",
"PPC_INST_MFCFAR",
"PPC_INST_MFPID",
"PPC_INST_MFCSRR0",
"PPC_INST_MFCSRR1",
"PPC_INST_MFDEAR",
"PPC_INST_MFESR",
"PPC_INST_MFIVPR",
"PPC_INST_MFCMPA",
"PPC_INST_MFCMPB",
"PPC_INST_MFCMPC",
"PPC_INST_MFCMPD",
"PPC_INST_MFICR",
"PPC_INST_MFDER",
"PPC_INST_MFCOUNTA",
"PPC_INST_MFCOUNTB",
"PPC_INST_MFCMPE",
"PPC_INST_MFCMPF",
"PPC_INST_MFCMPG",
"PPC_INST_MFCMPH",
"PPC_INST_MFLCTRL1",
"PPC_INST_MFLCTRL2",
"PPC_INST_MFICTRL",
"PPC_INST_MFBAR",
"PPC_INST_MFVRSAVE",
"PPC_INST_MFUSPRG0",
"PPC_INST_MFTB",
"PPC_INST_MFTBL",
"PPC_INST_MFTBU",
"PPC_INST_MFSPRG",
"PPC_INST_MFSPRG0",
"PPC_INST_MFSPRG1",
"PPC_INST_MFSPRG2",
"PPC_INST_MFSPRG3",
"PPC_INST_MFSPRG4",
"PPC_INST_MFSPRG5",
"PPC_INST_MFSPRG6",
"PPC_INST_MFSPRG7",
"PPC_INST_MFASR",
"PPC_INST_MFEAR",
"PPC_INST_MFPIR",
"PPC_INST_MFPVR",
"PPC_INST_MFDBSR",
"PPC_INST_MFDBCR0",
"PPC_INST_MFDBCR1",
"PPC_INST_MFDBCR2",
"PPC_INST_MFIAC1",
"PPC_INST_MFIAC2",
"PPC_INST_MFIAC3",
"PPC_INST_MFIAC4",
"PPC_INST_MFDAC1",
"PPC_INST_MFDAC2",
"PPC_INST_MFDVC1",
"PPC_INST_MFDVC2",
"PPC_INST_MFTSR",
"PPC_INST_MFTCR",
"PPC_INST_MFIVOR0",
"PPC_INST_MFIVOR1",
"PPC_INST_MFIVOR2",
"PPC_INST_MFIVOR3",
"PPC_INST_MFIVOR4",
"PPC_INST_MFIVOR5",
"PPC_INST_MFIVOR6",
"PPC_INST_MFIVOR7",
"PPC_INST_MFIVOR8",
"PPC_INST_MFIVOR9",
"PPC_INST_MFIVOR10",
"PPC_INST_MFIVOR11",
"PPC_INST_MFIVOR12",
"PPC_INST_MFIVOR13",
"PPC_INST_MFIVOR14",
"PPC_INST_MFIVOR15",
"PPC_INST_MFSPEFSCR",
"PPC_INST_MFBBEAR",
"PPC_INST_MFBBTAR",
"PPC_INST_MFIVOR32",
"PPC_INST_MFIVOR33",
"PPC_INST_MFIVOR34",
"PPC_INST_MFIVOR35",
"PPC_INST_MFIBATU",
"PPC_INST_MFIBATL",
"PPC_INST_MFDBATU",
"PPC_INST_MFDBATL",
"PPC_INST_MFIC_CST",
"PPC_INST_MFIC_ADR",
"PPC_INST_MFIC_DAT",
"PPC_INST_MFDC_CST",
"PPC_INST_MFDC_ADR",
"PPC_INST_MFMCSRR0",
"PPC_INST_MFDC_DAT",
"PPC_INST_MFMCSRR1",
"PPC_INST_MFMCSR",
"PPC_INST_MFMCAR",
"PPC_INST_MFDPDR",
"PPC_INST_MFDPIR",
"PPC_INST_MFIMMR",
"PPC_INST_MFMI_CTR",
"PPC_INST_MFMI_AP",
"PPC_INST_MFMI_EPN",
"PPC_INST_MFMI_TWC",
"PPC_INST_MFMI_RPN",
"PPC_INST_MFMD_CTR",
"PPC_INST_MFM_CASID",
"PPC_INST_MFMD_AP",
"PPC_INST_MFMD_EPN",
"PPC_INST_MFMD_TWB",
"PPC_INST_MFMD_TWC",
"PPC_INST_MFMD_RPN",
"PPC_INST_MFM_TW",
"PPC_INST_MFMI_DBCAM",
"PPC_INST_MFMI_DBRAM0",
"PPC_INST_MFMI_DBRAM1",
"PPC_INST_MFMD_DBCAM",
"PPC_INST_MFMD_DBRAM0",
"PPC_INST_MFMD_DBRAM1",
"PPC_INST_MFUMMCR0",
"PPC_INST_MFUPMC1",
"PPC_INST_MFUPMC2",
"PPC_INST_MFUSIA",
"PPC_INST_MFUMMCR1",
"PPC_INST_MFUPMC3",
"PPC_INST_MFUPMC4",
"PPC_INST_MFZPR",
"PPC_INST_MFCCR0",
"PPC_INST_MFMMCR0",
"PPC_INST_MFPMC1",
"PPC_INST_MFSGR",
"PPC_INST_MFPMC2",
"PPC_INST_MFDCWR",
"PPC_INST_MFSIA",
"PPC_INST_MFSLER",
"PPC_INST_MFMMCR1",
"PPC_INST_MFSU0R",
"PPC_INST_MFPMC3",
"PPC_INST_MFPMC4",
"PPC_INST_MFICDBDR",
"PPC_INST_MFEVPR",
"PPC_INST_MFCDBCR",
"PPC_INST_MFPIT",
"PPC_INST_MFTBHI",
"PPC_INST_MFTBLO",
"PPC_INST_MFSRR2",
"PPC_INST_MFSRR3",
"PPC_INST_MFL2CR",
"PPC_INST_MFDCCR",
"PPC_INST_MFICCR",
"PPC_INST_MFICTC",
"PPC_INST_MFPBL1",
"PPC_INST_MFTHRM1",
"PPC_INST_MFPBU1",
"PPC_INST_MFTHRM2",
"PPC_INST_MFPBL2",
"PPC_INST_MFTHRM3",
"PPC_INST_MFPBU2",
"PPC_INST_MFSPR",
"PPC_INST_LWAX",
"PPC_INST_DST",
"PPC_INST_DSTT",
"PPC_INST_LHAX",
"PPC_INST_LHAXE",
"PPC_INST_DSTST",
"PPC_INST_DSTSTT",
"PPC_INST_DCCCI",
"PPC_INST_ABS",
"PPC_INST_ABSO",
"PPC_INST_DIVS",
"PPC_INST_DIVSO",
"PPC_INST_TLBIA",
"PPC_INST_LWAUX",
"PPC_INST_LHAUX",
"PPC_INST_LHAUXE",
"PPC_INST_MTDCRX",
"PPC_INST_DCBLC",
"PPC_INST_SUBFE64",
"PPC_INST_SUBFE64O",
"PPC_INST_ADDE64",
"PPC_INST_ADDE64O",
"PPC_INST_DCBLCE",
"PPC_INST_SLBMTE",
"PPC_INST_STHX",
"PPC_INST_CMPB",
"PPC_INST_LFQX",
"PPC_INST_LFDPX",
"PPC_INST_LFQUX",
"PPC_INST_STFQX",
"PPC_INST_STFDPX",
"PPC_INST_STFQUX",
"PPC_INST_ORC",
"PPC_INST_SRADI",
"PPC_INST_STHXE",
"PPC_INST_SLBIE",
"PPC_INST_ECOWX",
"PPC_INST_STHUX",
"PPC_INST_STHUXE",
"PPC_INST_CCTPL",
"PPC_INST_CCTPM",
"PPC_INST_CCTPH",
"PPC_INST_DB8CYC",
"PPC_INST_DB10CYC",
"PPC_INST_DB12CYC",
"PPC_INST_DB16CYC",
"PPC_INST_MR",
"PPC_INST_OR",
"PPC_INST_MTEXISR",
"PPC_INST_MTEXIER",
"PPC_INST_MTBR0",
"PPC_INST_MTBR1",
"PPC_INST_MTBR2",
"PPC_INST_MTBR3",
"PPC_INST_MTBR4",
"PPC_INST_MTBR5",
"PPC_INST_MTBR6",
"PPC_INST_MTBR7",
"PPC_INST_MTBEAR",
"PPC_INST_MTBESR",
"PPC_INST_MTIOCR",
"PPC_INST_MTDMACR0",
"PPC_INST_MTDMACT0",
"PPC_INST_MTDMADA0",
"PPC_INST_MTDMASA0",
"PPC_INST_MTDMACC0",
"PPC_INST_MTDMACR1",
"PPC_INST_MTDMACT1",
"PPC_INST_MTDMADA1",
"PPC_INST_MTDMASA1",
"PPC_INST_MTDMACC1",
"PPC_INST_MTDMACR2",
"PPC_INST_MTDMACT2",
"PPC_INST_MTDMADA2",
"PPC_INST_MTDMASA2",
"PPC_INST_MTDMACC2",
"PPC_INST_MTDMACR3",
"PPC_INST_MTDMACT3",
"PPC_INST_MTDMADA3",
"PPC_INST_MTDMASA3",
"PPC_INST_MTDMACC3",
"PPC_INST_MTDMASR",
"PPC_INST_MTDCR",
"PPC_INST_SUBFZE64",
"PPC_INST_SUBFZE64O",
"PPC_INST_DIVDU",
"PPC_INST_DIVDUO",
"PPC_INST_ADDZE64",
"PPC_INST_ADDZE64O",
"PPC_INST_DIVWU",
"PPC_INST_DIVWUO",
"PPC_INST_MTMQ",
"PPC_INST_MTXER",
"PPC_INST_MTLR",
"PPC_INST_MTCTR",
"PPC_INST_MTTID",
"PPC_INST_MTDSISR",
"PPC_INST_MTDAR",
"PPC_INST_MTRTCU",
"PPC_INST_MTRTCL",
"PPC_INST_MTDEC",
"PPC_INST_MTSDR0",
"PPC_INST_MTSDR1",
"PPC_INST_MTSRR0",
"PPC_INST_MTSRR1",
"PPC_INST_MTCFAR",
"PPC_INST_MTPID",
"PPC_INST_MTDECAR",
"PPC_INST_MTCSRR0",
"PPC_INST_MTCSRR1",
"PPC_INST_MTDEAR",
"PPC_INST_MTESR",
"PPC_INST_MTIVPR",
"PPC_INST_MTCMPA",
"PPC_INST_MTCMPB",
"PPC_INST_MTCMPC",
"PPC_INST_MTCMPD",
"PPC_INST_MTICR",
"PPC_INST_MTDER",
"PPC_INST_MTCOUNTA",
"PPC_INST_MTCOUNTB",
"PPC_INST_MTCMPE",
"PPC_INST_MTCMPF",
"PPC_INST_MTCMPG",
"PPC_INST_MTCMPH",
"PPC_INST_MTLCTRL1",
"PPC_INST_MTLCTRL2",
"PPC_INST_MTICTRL",
"PPC_INST_MTBAR",
"PPC_INST_MTVRSAVE",
"PPC_INST_MTUSPRG0",
"PPC_INST_MTSPRG",
"PPC_INST_MTSPRG0",
"PPC_INST_MTSPRG1",
"PPC_INST_MTSPRG2",
"PPC_INST_MTSPRG3",
"PPC_INST_MTSPRG4",
"PPC_INST_MTSPRG5",
"PPC_INST_MTSPRG6",
"PPC_INST_MTSPRG7",
"PPC_INST_MTASR",
"PPC_INST_MTEAR",
"PPC_INST_MTTBL",
"PPC_INST_MTTBU",
"PPC_INST_MTDBSR",
"PPC_INST_MTDBCR0",
"PPC_INST_MTDBCR1",
"PPC_INST_MTDBCR2",
"PPC_INST_MTIAC1",
"PPC_INST_MTIAC2",
"PPC_INST_MTIAC3",
"PPC_INST_MTIAC4",
"PPC_INST_MTDAC1",
"PPC_INST_MTDAC2",
"PPC_INST_MTDVC1",
"PPC_INST_MTDVC2",
"PPC_INST_MTTSR",
"PPC_INST_MTTCR",
"PPC_INST_MTIVOR0",
"PPC_INST_MTIVOR1",
"PPC_INST_MTIVOR2",
"PPC_INST_MTIVOR3",
"PPC_INST_MTIVOR4",
"PPC_INST_MTIVOR5",
"PPC_INST_MTIVOR6",
"PPC_INST_MTIVOR7",
"PPC_INST_MTIVOR8",
"PPC_INST_MTIVOR9",
"PPC_INST_MTIVOR10",
"PPC_INST_MTIVOR11",
"PPC_INST_MTIVOR12",
"PPC_INST_MTIVOR13",
"PPC_INST_MTIVOR14",
"PPC_INST_MTIVOR15",
"PPC_INST_MTSPEFSCR",
"PPC_INST_MTBBEAR",
"PPC_INST_MTBBTAR",
"PPC_INST_MTIVOR32",
"PPC_INST_MTIVOR33",
"PPC_INST_MTIVOR34",
"PPC_INST_MTIVOR35",
"PPC_INST_MTIBATU",
"PPC_INST_MTIBATL",
"PPC_INST_MTDBATU",
"PPC_INST_MTDBATL",
"PPC_INST_MTMCSRR0",
"PPC_INST_MTMCSRR1",
"PPC_INST_MTMCSR",
"PPC_INST_MTUMMCR0",
"PPC_INST_MTUPMC1",
"PPC_INST_MTUPMC2",
"PPC_INST_MTUSIA",
"PPC_INST_MTUMMCR1",
"PPC_INST_MTUPMC3",
"PPC_INST_MTUPMC4",
"PPC_INST_MTZPR",
"PPC_INST_MTCCR0",
"PPC_INST_MTMMCR0",
"PPC_INST_MTSGR",
"PPC_INST_MTPMC1",
"PPC_INST_MTDCWR",
"PPC_INST_MTPMC2",
"PPC_INST_MTSLER",
"PPC_INST_MTSIA",
"PPC_INST_MTSU0R",
"PPC_INST_MTMMCR1",
"PPC_INST_MTPMC3",
"PPC_INST_MTPMC4",
"PPC_INST_MTICDBDR",
"PPC_INST_MTEVPR",
"PPC_INST_MTCDBCR",
"PPC_INST_MTPIT",
"PPC_INST_MTTBHI",
"PPC_INST_MTTBLO",
"PPC_INST_MTSRR2",
"PPC_INST_MTSRR3",
"PPC_INST_MTL2CR",
"PPC_INST_MTDCCR",
"PPC_INST_MTICCR",
"PPC_INST_MTICTC",
"PPC_INST_MTPBL1",
"PPC_INST_MTTHRM1",
"PPC_INST_MTPBU1",
"PPC_INST_MTTHRM2",
"PPC_INST_MTPBL2",
"PPC_INST_MTTHRM3",
"PPC_INST_MTPBU2",
"PPC_INST_MTSPR",
"PPC_INST_DCBI",
"PPC_INST_NAND",
"PPC_INST_DCBIE",
"PPC_INST_DCREAD",
"PPC_INST_MTPMR",
"PPC_INST_ICBTLS",
"PPC_INST_NABS",
"PPC_INST_SUBFME64",
"PPC_INST_NABSO",
"PPC_INST_SUBFME64O",
"PPC_INST_DIVD",
"PPC_INST_DIVDO",
"PPC_INST_ADDME64",
"PPC_INST_ADDME64O",
"PPC_INST_DIVW",
"PPC_INST_DIVWO",
"PPC_INST_ICBTLSE",
"PPC_INST_SLBIA",
"PPC_INST_CLI",
"PPC_INST_STDCXE",
"PPC_INST_MCRXR",
"PPC_INST_BBLELS",
"PPC_INST_MCRXR64",
"PPC_INST_CLCS",
"PPC_INST_LDBRX",
"PPC_INST_LSWX",
"PPC_INST_LSX",
"PPC_INST_LWBRX",
"PPC_INST_LBRX",
"PPC_INST_LFSX",
"PPC_INST_SRW",
"PPC_INST_SR",
"PPC_INST_RRIB",
"PPC_INST_SRD",
"PPC_INST_MASKIR",
"PPC_INST_LWBRXE",
"PPC_INST_LFSXE",
"PPC_INST_BBELR",
"PPC_INST_TLBSYNC",
"PPC_INST_LFSUX",
"PPC_INST_LFSUXE",
"PPC_INST_MFSR",
"PPC_INST_LSWI",
"PPC_INST_LSI",
"PPC_INST_LWSYNC",
"PPC_INST_PTESYNC",
"PPC_INST_MSYNC",
"PPC_INST_SYNC",
"PPC_INST_DCS",
"PPC_INST_LFDX",
"PPC_INST_LFDXE",
"PPC_INST_MFFGPR",
"PPC_INST_MFSRI",
"PPC_INST_DCLST",
"PPC_INST_LFDUX",
"PPC_INST_LFDUXE",
"PPC_INST_MFSRIN",
"PPC_INST_STDBRX",
"PPC_INST_STSWX",
"PPC_INST_STSX",
"PPC_INST_STWBRX",
"PPC_INST_STBRX",
"PPC_INST_STFSX",
"PPC_INST_SRQ",
"PPC_INST_SRE",
"PPC_INST_STWBRXE",
"PPC_INST_STFSXE",
"PPC_INST_STFSUX",
"PPC_INST_SRIQ",
"PPC_INST_STFSUXE",
"PPC_INST_STSWI",
"PPC_INST_STSI",
"PPC_INST_STFDX",
"PPC_INST_SRLQ",
"PPC_INST_SREQ",
"PPC_INST_STFDXE",
"PPC_INST_MFTGPR",
"PPC_INST_DCBA",
"PPC_INST_STFDUX",
"PPC_INST_SRLIQ",
"PPC_INST_DCBAE",
"PPC_INST_STFDUXE",
"PPC_INST_TLBIVAX",
"PPC_INST_TLBIVAXE",
"PPC_INST_LWZCIX",
"PPC_INST_LHBRX",
"PPC_INST_SRAW",
"PPC_INST_SRA",
"PPC_INST_SRAD",
"PPC_INST_LHBRXE",
"PPC_INST_LDXE",
"PPC_INST_LDUXE",
"PPC_INST_RAC",
"PPC_INST_LHZCIX",
"PPC_INST_DSS",
"PPC_INST_DSSALL",
"PPC_INST_SRAWI",
"PPC_INST_SRAI",
"PPC_INST_SLBMFEV",
"PPC_INST_LBZCIX",
"PPC_INST_MBAR",
"PPC_INST_EIEIO",
"PPC_INST_LFIWAX",
"PPC_INST_LDCIX",
"PPC_INST_TLBSX",
"PPC_INST_TLBSXE",
"PPC_INST_SLBMFEE",
"PPC_INST_STWCIX",
"PPC_INST_STHBRX",
"PPC_INST_SRAQ",
"PPC_INST_SREA",
"PPC_INST_EXTSH",
"PPC_INST_EXTS",
"PPC_INST_STHBRXE",
"PPC_INST_STDXE",
"PPC_INST_TLBREHI",
"PPC_INST_TLBRELO",
"PPC_INST_TLBRE",
"PPC_INST_STHCIX",
"PPC_INST_SRAIQ",
"PPC_INST_EXTSB",
"PPC_INST_STDUXE",
"PPC_INST_ICCCI",
"PPC_INST_TLBWEHI",
"PPC_INST_TLBWELO",
"PPC_INST_TLBWE",
"PPC_INST_TLBLD",
"PPC_INST_STBCIX",
"PPC_INST_ICBI",
"PPC_INST_STFIWX",
"PPC_INST_EXTSW",
"PPC_INST_ICREAD",
"PPC_INST_ICBIE",
"PPC_INST_STFIWXE",
"PPC_INST_TLBLI",
"PPC_INST_STDCIX",
"PPC_INST_DCBZL",
"PPC_INST_DCBZ",
"PPC_INST_DCLZ",
"PPC_INST_DCBZE",
"PPC_INST_LVEBX",
"PPC_INST_LVEHX",
"PPC_INST_LVEWX",
"PPC_INST_LVSL",
"PPC_INST_LVSR",
"PPC_INST_LVX",
"PPC_INST_LVXL",
"PPC_INST_STVEBX",
"PPC_INST_STVEHX",
"PPC_INST_STVEWX",
"PPC_INST_STVX",
"PPC_INST_STVXL",
"PPC_INST_LVLX",
"PPC_INST_LVLXL",
"PPC_INST_LVRX",
"PPC_INST_LVRXL",
"PPC_INST_STVLX",
"PPC_INST_STVLXL",
"PPC_INST_STVRX",
"PPC_INST_STVRXL",
"PPC_INST_LWZ",
"PPC_INST_L",
"PPC_INST_LWZU",
"PPC_INST_LU",
"PPC_INST_LBZ",
"PPC_INST_LBZU",
"PPC_INST_STW",
"PPC_INST_ST",
"PPC_INST_STWU",
"PPC_INST_STU",
"PPC_INST_STB",
"PPC_INST_STBU",
"PPC_INST_LHZ",
"PPC_INST_LHZU",
"PPC_INST_LHA",
"PPC_INST_LHAU",
"PPC_INST_STH",
"PPC_INST_STHU",
"PPC_INST_LMW",
"PPC_INST_LM",
"PPC_INST_STMW",
"PPC_INST_STM",
"PPC_INST_LFS",
"PPC_INST_LFSU",
"PPC_INST_LFD",
"PPC_INST_LFDU",
"PPC_INST_STFS",
"PPC_INST_STFSU",
"PPC_INST_STFD",
"PPC_INST_STFDU",
"PPC_INST_LQ",
"PPC_INST_LFQ",
"PPC_INST_LFQU",
"PPC_INST_LFDP",
"PPC_INST_LBZE",
"PPC_INST_LBZUE",
"PPC_INST_LHZE",
"PPC_INST_LHZUE",
"PPC_INST_LHAE",
"PPC_INST_LHAUE",
"PPC_INST_LWZE",
"PPC_INST_LWZUE",
"PPC_INST_STBE",
"PPC_INST_STBUE",
"PPC_INST_STHE",
"PPC_INST_STHUE",
"PPC_INST_STWE",
"PPC_INST_STWUE",
"PPC_INST_LD",
"PPC_INST_LDU",
"PPC_INST_LWA",
"PPC_INST_DADD",
"PPC_INST_DQUA",
"PPC_INST_FDIVS",
"PPC_INST_FSUBS",
"PPC_INST_FADDS",
"PPC_INST_FSQRTS",
"PPC_INST_FRES",
"PPC_INST_FMULS",
"PPC_INST_FRSQRTES",
"PPC_INST_FMSUBS",
"PPC_INST_FMADDS",
"PPC_INST_FNMSUBS",
"PPC_INST_FNMADDS",
"PPC_INST_DMUL",
"PPC_INST_DRRND",
"PPC_INST_DSCLI",
"PPC_INST_DQUAI",
"PPC_INST_DSCRI",
"PPC_INST_DRINTX",
"PPC_INST_DCMPO",
"PPC_INST_DTSTEX",
"PPC_INST_DTSTDC",
"PPC_INST_DTSTDG",
"PPC_INST_DRINTN",
"PPC_INST_DCTDP",
"PPC_INST_DCTFIX",
"PPC_INST_DDEDPD",
"PPC_INST_DXEX",
"PPC_INST_DSUB",
"PPC_INST_DDIV",
"PPC_INST_DCMPU",
"PPC_INST_DTSTSF",
"PPC_INST_DRSP",
"PPC_INST_DCFFIX",
"PPC_INST_DENBCD",
"PPC_INST_DIEX",
"PPC_INST_STFQ",
"PPC_INST_STFQU",
"PPC_INST_STFDP",
"PPC_INST_LDE",
"PPC_INST_LDUE",
"PPC_INST_LFSE",
"PPC_INST_LFSUE",
"PPC_INST_LFDE",
"PPC_INST_LFDUE",
"PPC_INST_STDE",
"PPC_INST_STDUE",
"PPC_INST_STFSE",
"PPC_INST_STFSUE",
"PPC_INST_STFDE",
"PPC_INST_STFDUE",
"PPC_INST_STD",
"PPC_INST_STDU",
"PPC_INST_STQ",
"PPC_INST_FCMPU",
"PPC_INST_DADDQ",
"PPC_INST_DQUAQ",
"PPC_INST_FCPSGN",
"PPC_INST_FRSP",
"PPC_INST_FCTIW",
"PPC_INST_FCIR",
"PPC_INST_FCTIWZ",
"PPC_INST_FCIRZ",
"PPC_INST_FDIV",
"PPC_INST_FD",
"PPC_INST_FSUB",
"PPC_INST_FS",
"PPC_INST_FADD",
"PPC_INST_FA",
"PPC_INST_FSQRT",
"PPC_INST_FSEL",
"PPC_INST_FRE",
"PPC_INST_FMUL",
"PPC_INST_FM",
"PPC_INST_FRSQRTE",
"PPC_INST_FMSUB",
"PPC_INST_FMS",
"PPC_INST_FMADD",
"PPC_INST_FMA",
"PPC_INST_FNMSUB",
"PPC_INST_FNMS",
"PPC_INST_FNMADD",
"PPC_INST_FNMA",
"PPC_INST_FCMPO",
"PPC_INST_DMULQ",
"PPC_INST_DRRNDQ",
"PPC_INST_MTFSB1",
"PPC_INST_FNEG",
"PPC_INST_MCRFS",
"PPC_INST_DSCLIQ",
"PPC_INST_DQUAIQ",
"PPC_INST_MTFSB0",
"PPC_INST_FMR",
"PPC_INST_DSCRIQ",
"PPC_INST_DRINTXQ",
"PPC_INST_DCMPOQ",
"PPC_INST_MTFSFI",
"PPC_INST_FNABS",
"PPC_INST_DTSTEXQ",
"PPC_INST_DTSTDCQ",
"PPC_INST_DTSTDGQ",
"PPC_INST_DRINTNQ",
"PPC_INST_DCTQPQ",
"PPC_INST_FABS",
"PPC_INST_DCTFIXQ",
"PPC_INST_DDEDPDQ",
"PPC_INST_DXEXQ",
"PPC_INST_FRIN",
"PPC_INST_FRIZ",
"PPC_INST_FRIP",
"PPC_INST_FRIM",
"PPC_INST_DSUBQ",
"PPC_INST_DDIVQ",
"PPC_INST_MFFS",
"PPC_INST_DCMPUQ",
"PPC_INST_DTSTSFQ",
"PPC_INST_MTFSF",
"PPC_INST_DRDPQ",
"PPC_INST_DCFFIXQ",
"PPC_INST_FCTID",
"PPC_INST_FCTIDZ",
"PPC_INST_DENBCDQ",
"PPC_INST_FCFID",
"PPC_INST_DIEXQ",
"PPC_INST_VUPKHSH128",
"PPC_INST_VUPKLSH128" };

struct SwitchTable
{
    std::vector<size_t> labels{};
    size_t base{};
    size_t defaultLabel{};
    uint32_t r{};
    uint32_t type{};
};

uint32_t findOffset( uint32_t* code, size_t base, int occurence )
{
    uint32_t pOffset;
    uint32_t pos = 0;
    for (int i = 0; i < occurence; i++)
    {
        while (true)
        {
            ppc_insn insn;
            ppc::Disassemble(code + pos, base + pos * 4, insn);
            pos++;
            if (insn.opcode->id == PPC_INST_LIS)
            {
                pOffset = insn.operands[1] << 16;
            }
            if (insn.opcode->id == PPC_INST_ADDI)
            {
                pOffset += insn.operands[2];
                break;
            }
        }
    }
    return pOffset;
}

uint32_t findShift(uint32_t* code, size_t base)
{
    uint32_t pos = 0;
    while (true)
    {
        ppc_insn insn;
        ppc::Disassemble(code + pos, base + pos * 4, insn);
        pos++;
        if (insn.opcode->id == PPC_INST_RLWINM)
        {
            return insn.operands[2];
            break;
        }
    }
    assert(false);
    return -1;
}

int safeInstruction(const Section& section, size_t pos)
{
    size_t base = section.base;
    uint8_t* data = section.data;
    ppc_insn insn;
    if ((pos < 0) || (section.size <= pos * 4))
    {
        return 0;
    }
    ppc::Disassemble(data + pos * 4, base + pos * 4, insn);
    if (insn.opcode != NULL)
    {
        return insn.opcode->id;
    }
    return 0;
}

int safeOperand(const Section& section, size_t pos, int operandIndex )
{
    size_t base = section.base;
    uint8_t* data = section.data;
    ppc_insn insn;
    if ((pos < 0) || (section.size <= pos * 4))
    {
        return -1;
    }
    ppc::Disassemble(data + pos * 4, base + pos * 4, insn);
    if (insn.opcode != NULL)
    {
        return insn.operands[operandIndex];
    }
    return -1;
}

std::vector<uint32_t> absoluteSwitch;
std::vector<uint32_t> computedSwitch;
std::vector<uint32_t> byteOffsetSwitch;
std::vector<uint32_t> wordOffsetSwitch;

size_t findConnection(const Section& section, int start, int distance, uint32_t opcode, uint32_t reg)
{
    for (size_t j = 1; j < distance; j++)
    {
        if ((safeInstruction(section, start - j) == opcode) && (safeOperand(section, start - j, 0) == reg))
        {
            return start - j;
        }
    }
    return 0;
}

bool findAbsolute(const Section& section, int start)
{
    size_t base = section.base;
    int regMTCTR = safeOperand(section, start, 0);
    if (safeInstruction(section, start - 1) == PPC_INST_LWZX)
    {
        int regLWZXdst = safeOperand(section, start - 1, 0);
        if (regMTCTR == regLWZXdst)
        {
            int regLWZXsrc = safeOperand(section, start - 1, 1);
            // SEARCH FOR SRC ADDRESS SET-UP
            size_t j = findConnection(section, start - 1, 5, PPC_INST_LIS, regLWZXsrc);
            if ( 0 < j )
            {
                size_t k = findConnection(section, start - 1, 5, PPC_INST_ADDI, regLWZXsrc);
                if ( j < k )
                {
                    printf("Found SWITCH_ABSOLUTE table template at 0x%08x\n", base + start * 4);
                    for (size_t l = j; l < start + 2; l++)
                    {
                        uint32_t instruction = safeInstruction(section, l);
                        absoluteSwitch.push_back( instruction );
                        printf("%s\n", OpcodeToName[instruction]);
                    }
                    return true;
                }
            }
        }
    }
    return false;
}

bool findComputed(const Section& section, int start)
{
    size_t base = section.base;
    int regMTCTR = safeOperand(section, start, 0);
    if (safeInstruction(section, start - 1) == PPC_INST_ADD)
    {
        int regADDdst = safeOperand(section, start - 1, 0);
        if (regMTCTR == regADDdst)
        {
            int regADDsrc = safeOperand(section, start - 1, 2);
            // SEARCH FOR SRC ADDRESS SET-UP
            size_t j = findConnection(section, start - 1, 5, PPC_INST_RLWINM, regADDsrc);
            if ( 0 < j )
            {
                int regRLWINMsrc = safeOperand(section, j, 1);
                size_t k = findConnection(section, j, 3, PPC_INST_LBZX, regRLWINMsrc);
                if (0 < k)
                {
                    int regLBZXsrc = safeOperand(section, k, 1);
                    size_t l = findConnection(section, k, 4, PPC_INST_LIS, regLBZXsrc);
                    if (0 < l)
                    {
                        printf("Found SWITCH_COMPUTED table template at 0x%08x\n", base + start * 4);
                        for (size_t m = l; m <= start; m++)
                        {
                            uint32_t instruction = safeInstruction(section, m);
                            computedSwitch.push_back(instruction);
                            printf("%s\n", OpcodeToName[instruction]);
                        }
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

bool findByteOffset(const Section& section, int start)
{
    size_t base = section.base;
    int regMTCTR = safeOperand(section, start, 0);
    if (safeInstruction(section, start - 1) == PPC_INST_ADD)
    {
        int regADDdst = safeOperand(section, start - 1, 0);
        if (regMTCTR == regADDdst)
        {
            int regADDsrc = safeOperand(section, start - 1, 2);
            // SEARCH FOR SRC ADDRESS SET-UP
            size_t j = findConnection(section, start - 1, 7, PPC_INST_LBZX, regADDsrc);
            if (0 < j)
            {
                int regLBZXsrc = safeOperand(section, j, 1);
                size_t l = findConnection(section, j, 4, PPC_INST_LIS, regLBZXsrc);
                if (0 < l)
                {
                    printf("Found SWITCH_BYTEOFFSET table template at 0x%08x\n", base + start * 4);
                    for (size_t m = l; m <= start; m++)
                    {
                        uint32_t instruction = safeInstruction(section, m);
                        byteOffsetSwitch.push_back(instruction);
                        printf("%s\n", OpcodeToName[instruction]);
                    }
                    return true;
                }
            }
        }
    }
    return false;
}

bool findHalfOffset(const Section& section, int start)
{
    size_t base = section.base;
    int regMTCTR = safeOperand(section, start, 0);
    if (safeInstruction(section, start - 1) == PPC_INST_ADD)
    {
        int regADDdst = safeOperand(section, start - 1, 0);
        if (regMTCTR == regADDdst)
        {
            int regADDsrc = safeOperand(section, start - 1, 2);
            // SEARCH FOR SRC ADDRESS SET-UP
            size_t j = findConnection(section, start - 1, 5, PPC_INST_LHZX, regADDsrc);
            if (0 < j)
            {
                int regLHZXsrc = safeOperand(section, j, 1);
                size_t l = findConnection(section, j, 4, PPC_INST_LIS, regLHZXsrc);
                if (0 < l)
                {
                    printf("Found SWITCH_SHORTOFFSET table template at 0x%08x\n", base + start * 4);
                    for (size_t m = l; m <= start; m++)
                    {
                        uint32_t instruction = safeInstruction(section, m);
                        wordOffsetSwitch.push_back(instruction);
                        printf("%s\n", OpcodeToName[instruction]);
                    }
                    return true;
                }
            }
        }
    }
    return false;
}

bool findTables( Image& image )
{
    bool foundAbsolute = false;
    bool foundComputed = false;
    bool foundByteOffset = false;
    bool foundHalfOffset = false;

    for (const auto& section : image.sections)
    {
        if (!(section.flags & SectionFlags_Code))
        {
            continue;
        }

        size_t base = section.base;
        uint8_t* data = section.data;
        for (size_t i = 0; i < section.size / 4; i++)
        {
            if ( (safeInstruction(section, i) == PPC_INST_MTCTR) && (safeInstruction(section, i+1) == PPC_INST_BCTR) )
            {
                if (!foundAbsolute)
                {
                    foundAbsolute = findAbsolute(section, i);
                }
                if (!foundComputed)
                {
                    foundComputed = findComputed(section, i);
                }
                if (!foundByteOffset)
                {
                    foundByteOffset = findByteOffset(section, i);
                }
                if (!foundHalfOffset)
                {
                    foundHalfOffset = findHalfOffset(section, i);
                }
                if (foundAbsolute && foundComputed && foundByteOffset && foundHalfOffset)
                {
                    return true;
                }
            }
        }
    }

    return false;
}

void ReadTable(Image& image, SwitchTable& table)
{
    auto* code = (uint32_t*)image.Find(table.base);
    uint32_t pOffset = findOffset( code, table.base, 1 );

    if (table.type == SWITCH_ABSOLUTE)
    {
        printf("FOUND SWITCH_ABSOLUTE %08x\n", table.base);
        const auto* offsets = (be<uint32_t>*)image.Find(pOffset);
        for (size_t i = 0; i < table.labels.size(); i++)
        {
            table.labels[i] = offsets[i];
        }
    }
    else if (table.type == SWITCH_COMPUTED)
    {
        printf("FOUND SWITCH_COMPUTED %08x\n", table.base);
        const auto* offsets = (uint8_t*)image.Find(pOffset);
        uint32_t base = findOffset(code, table.base, 2);
        uint32_t shift = findShift(code, table.base);

        for (size_t i = 0; i < table.labels.size(); i++)
        {
            table.labels[i] = base + (offsets[i] << shift);
        }
    }
    else if (table.type == SWITCH_BYTEOFFSET || table.type == SWITCH_SHORTOFFSET)
    {
        if (table.type == SWITCH_BYTEOFFSET)
        {
            printf("FOUND SWITCH_BYTEOFFSET %08x\n", table.base);
            const auto* offsets = (uint8_t*)image.Find(pOffset);
            uint32_t base = findOffset(code, table.base, 2);

            for (size_t i = 0; i < table.labels.size(); i++)
            {
                table.labels[i] = base + offsets[i];
            }
        }
        else if (table.type == SWITCH_SHORTOFFSET)
        {
            printf("FOUND SWITCH_SHORTOFFSET %08x\n", table.base);
            const auto* offsets = (be<uint16_t>*)image.Find(pOffset);
            uint32_t base = findOffset(code, table.base, 2);

            for (size_t i = 0; i < table.labels.size(); i++)
            {
                table.labels[i] = base + offsets[i];
            }
        }
    }
    else
    {
        assert(false);
    }
}

void ScanTable(const uint32_t* code, size_t base, SwitchTable& table)
{
    ppc_insn insn;
    uint32_t cr{ (uint32_t)-1 };
    for (int i = 0; i < 32; i++)
    {
        ppc::Disassemble(&code[-i], base - (4 * i), insn);
        if (insn.opcode == nullptr)
        {
            continue;
        }

        if (cr == -1 && (insn.opcode->id == PPC_INST_BGT || insn.opcode->id == PPC_INST_BGTLR || insn.opcode->id == PPC_INST_BLE || insn.opcode->id == PPC_INST_BLELR))
        {
            cr = insn.operands[0];
            if (insn.opcode->operands[1] != 0)
            {
                table.defaultLabel = insn.operands[1];
            }
        }
        else if (cr != -1)
        {
            if (insn.opcode->id == PPC_INST_CMPLWI && insn.operands[0] == cr)
            {
                table.r = insn.operands[1];
                table.labels.resize(insn.operands[2] + 1);
                table.base = base;
                break;
            }
        }
    }
}

void MakeMask(const uint32_t* instructions, size_t count)
{
    ppc_insn insn;
    for (size_t i = 0; i < count; i++)
    {
        ppc::Disassemble(&instructions[i], 0, insn);
        fmt::println("0x{:X}, // {}", ByteSwap(insn.opcode->opcode | (insn.instruction & insn.opcode->mask)), insn.opcode->name);
    }
}

void* SearchMask(const void* source, const uint32_t* compare, size_t compareCount, size_t size)
{
    assert(size % 4 == 0);
    uint32_t* src = (uint32_t*)source;
    size_t count = size / 4;
    ppc_insn insn;

    for (size_t i = 0; i < count; i++)
    {
        size_t c = 0;
        for (c = 0; c < compareCount; c++)
        {
            ppc::Disassemble(&src[i + c], 0, insn);
            if (insn.opcode == nullptr || insn.opcode->id != compare[c])
            {
                break;
            }
        }

        if (c == compareCount)
        {
            return &src[i];
        }
    }

    return nullptr;
}

static std::string out;

template<class... Args>
static void println(fmt::format_string<Args...> fmt, Args&&... args)
{
    fmt::vformat_to(std::back_inserter(out), fmt.get(), fmt::make_format_args(args...));
    out += '\n';
};

bool checkSignature(uint8_t* address, uint8_t* signature, int length)
{
    for (int i = 0; i < length; i++)
    {
        if (address[i] != signature[i])
        {
            return false;
        }
    }
    return true;
}

void searchSignature( Image& image, uint8_t* signature, int length, char* name )
{
    for (const auto& section : image.sections)
    {
        if (!(section.flags & SectionFlags_Code))
        {
            continue;
        }

        size_t base = section.base;
        uint8_t* data = section.data;
        uint8_t* dataStart = section.data;
        uint8_t* dataEnd = section.data + section.size;
        while (data < dataEnd && data != nullptr)
        {
            if (checkSignature(data, signature, length))
            {
                printf("%s = 0x%08x\n", name, data - section.data + base);
                return;
            }
            data += 4;
        }
    }
}

int main(int argc, char** argv)
{
    if (argc < 3)
    {
        printf("Usage: XenonAnalyse [input XEX file path] [output jump table TOML file path]");
        return EXIT_SUCCESS;
    }


    const auto file = LoadFile(argv[1]);
    auto image = Image::ParseImage(file.data(), file.size());

    findTables(image);

    auto printTable = [&](const SwitchTable& table)
        {
            println("[[switch]]");
            println("base = 0x{:X}", table.base);
            println("r = {}", table.r);
            println("default = 0x{:X}", table.defaultLabel);
            println("labels = [");
            for (const auto& label : table.labels)
            {
                println("    0x{:X},", label);
            }

            println("]");
            println("");
        };

    std::vector<SwitchTable> switches{};

    println("# Generated by XenonAnalyse");

    auto scanPattern = [&](uint32_t* pattern, size_t count, size_t type)
        {
            for (const auto& section : image.sections)
            {
                if (!(section.flags & SectionFlags_Code))
                {
                    continue;
                }

                size_t base = section.base;
                uint8_t* data = section.data;
                uint8_t* dataStart = section.data;
                uint8_t* dataEnd = section.data + section.size;
                while (data < dataEnd && data != nullptr)
                {
                    data = (uint8_t*)SearchMask(data, pattern, count, dataEnd - data);

                    if (data != nullptr)
                    {
                        SwitchTable table{};
                        table.type = type;
                        ScanTable((uint32_t*)data, base + (data - dataStart), table);

                        // fmt::println("{:X} ; jmptable - {}", base + (data - dataStart), table.labels.size());
                        if (table.base != 0)
                        {
                            ReadTable(image, table);
                            printTable(table);
                            switches.emplace_back(std::move(table));
                        }

                        data += 4;
                    }
                    continue;
                }
            }
        };

    /* EXAMPLE 1
    82c3928c  3d 80 82 c4             lis       r12, -0x7d3c
    82c39290  39 8c 92 a4             subi      r12, r12, 0x6d5c / 39 8C = ADDI
    82c39294  55 60 10 3a             rlwinm    r0, r11, 0x2, 0x0, 0x1d
    82c39298  7c 0c 00 2e             lwzx      r0, r12 = > switchD_82c392a0::switchdataD_82c = 82c392d0
    82c3929c  7c 09 03 a6             mtspr     CTR, r0 = MTCTR
    82c392a0  4e 80 04 20             bctr*/

    /* EXAMPLE 2
    8259bf34  3d 80 82 5a             lis       r12, -0x7da6
    8259bf38  55 60 10 3a             rlwinm    r0, r11, 0x2, 0x0, 0x1d
    8259bf3c  39 8c bf 4c             subi      r12, r12, 0x40b4
    8259bf40  7c 0c 00 2e             lwzx      r0, r12 = > switchD_8259bf48::switchdataD_825 = 8259c044
    8259bf44  7c 09 03 a6             mtspr     CTR, r0
    8259bf48  4e 80 04 20             bctr */

    /*uint32_t absoluteSwitch[] =
    {
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_RLWINM,
        PPC_INST_LWZX,
        PPC_INST_MTCTR,
        PPC_INST_BCTR,
    };*/

    /*uint32_t absoluteSwitch[] =
    {
        PPC_INST_LIS,
        PPC_INST_RLWINM,
        PPC_INST_ADDI,
        PPC_INST_LWZX,
        PPC_INST_MTCTR,
        PPC_INST_BCTR,
    };*/

    /* EXAMPLE 1
    822c3848  3d 80 82 00             lis       r12, -0x7e00
    822c384c  39 8c 39 18             addi      r12, r12, 0x3918
    822c3850  7c 0c 58 ae             lbzx      r0, r12, r11 = > DAT_82003917
    822c3854  54 00 10 3a             rlwinm    r0, r0, 0x2, 0x0, 0x1d
    822c3858  3d 80 82 2c             lis       r12, -0x7dd4
    822c385c  39 8c 38 70             addi      r12, r12, 0x3870
    822c3860  7d 8c 02 14             add       r12, r12, r0
    822c3864  7d 89 03 a6             mtspr     CTR, r12 */
    
    /* EXAMPLE 2
    8245d670  3d 80 82 05             lis       r12, -0x7dfb
    8245d674  39 8c 2a a0             addi      r12, r12, 0x2aa0
    8245d678  7c 0c 50 ae             lbzx      r0, r12, r10 = > DAT_82052a9e
    8245d67c  54 00 10 3a             rlwinm    r0, r0, 0x2, 0x0, 0x1d
    8245d680  3d 80 82 46             lis       r12, -0x7dba
    8245d684  60 00 00 00             ori       r0, r0, 0x0 NOP!!!
    8245d688  39 8c d6 98             subi      r12, r12, 0x2968
    8245d68c  7d 8c 02 14             add       r12, r12, r0
    8245d690  7d 89 03 a6             mtspr     CTR, r12 */

    /*uint32_t computedSwitch[] =
    {
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_LBZX,
        PPC_INST_RLWINM,
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_ADD,
        PPC_INST_MTCTR,
    };*/

    /*uint32_t computedSwitch2[] =
    {
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_LBZX,
        PPC_INST_RLWINM,
        PPC_INST_LIS,
        PPC_INST_NOP,
        PPC_INST_ADDI,
        PPC_INST_ADD,
        PPC_INST_MTCTR,
    };*/

    /* EXAMPLE 1
    822eafe0  3d 80 82 01             lis       r12, -0x7dff
    822eafe4  39 8c bc f8             subi      r12, r12, 0x4308
    822eafe8  7c 0c 58 ae             lbzx      r0, r12 = > DAT_8200bcf8, r11
    822eafec  3d 80 82 2f             lis       r12, -0x7dd1
    822eaff0  39 8c b0 08             subi      r12, r12, 0x4ff8
    822eaff4  7d 8c 02 14             add       r12, r12, r0
    822eaff8  7d 89 03 a6             mtspr     CTR, r12 */

    /* EXAMPLE 2
    82240010  3d 80 82 01             lis       r12, -0x7dff
    82240014  39 8c 05 e8             addi      r12, r12, 0x5e8
    82240018  7c 0c 18 ae             lbzx      r0, r12 = > switchD_82240034::switchdataD_820 = 18h
    8224001c  3d 80 82 24             lis       r12, -0x7ddc
    82240020  60 00 00 00             ori       r0, r0, 0x0
    82240024  39 8c 00 38             addi      r12, r12, 0x38
    82240028  60 00 00 00             ori       r0, r0, 0x0
    8224002c  7d 8c 02 14             add       r12, r12, r0
    82240030  7d 89 03 a6             mtspr     CTR, r12 */

    /*uint32_t offsetSwitch1[] =
    {
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_LBZX,
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_ADD,
        PPC_INST_MTCTR,
    };*/

    /*uint32_t offsetSwitch2[] =
    {
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_LBZX,
        PPC_INST_LIS,
        PPC_INST_NOP,
        PPC_INST_ADDI,
        PPC_INST_NOP,
        PPC_INST_ADD,
        PPC_INST_MTCTR,
    };*/

    /* EXAMPLE 1
    831b7458  3d 80 82 1a             lis       r12, -0x7de6
    831b745c  39 8c d7 08             subi      r12, r12, 0x28f8
    831b7460  55 60 08 3c             rlwinm    r0, r11, 0x1, 0x0, 0x1e
    831b7464  7c 0c 02 2e             lhzx      r0, r12 = > DAT_8219d708, r0
    831b7468  3d 80 83 1b             lis       r12, -0x7ce5
    831b746c  39 8c 74 80             addi      r12, r12, 0x7480
    831b7470  7d 8c 02 14             add       r12, r12, r0
    831b7474  7d 89 03 a6             mtspr     CTR, r12 */

    /* EXAMPLE 2
    822dafe4  3d 80 82 02             lis       r12, -0x7dfe
    822dafe8  55 60 08 3c             rlwinm    r0, r11, 0x1, 0x0, 0x1e
    822dafec  39 8c 3a 90             addi      r12, r12, 0x3a90
    822daff0  7c 0c 02 2e             lhzx      r0, r12 = > switchD_822db008::switchdataD_820
    822daff4  3d 80 82 2e             lis       r12, -0x7dd2
    822daff8  39 8c b0 0c             subi      r12, r12, 0x4ff4
    822daffc  60 00 00 00             ori       r0, r0, 0x0
    822db000  7d 8c 02 14             add       r12, r12, r0
    822db004  7d 89 03 a6             mtspr     CTR, r12 */

    /*uint32_t wordOffsetSwitch1[] =
    {
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_RLWINM,
        PPC_INST_LHZX,
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_ADD,
        PPC_INST_MTCTR,
    };*/

    /*uint32_t wordOffsetSwitch2[] =
    {
        PPC_INST_LIS,
        PPC_INST_RLWINM,
        PPC_INST_ADDI,
        PPC_INST_LHZX,
        PPC_INST_LIS,
        PPC_INST_ADDI,
        PPC_INST_NOP,
        PPC_INST_ADD,
        PPC_INST_MTCTR,
    };*/

    println("# ---- ABSOLUTE JUMPTABLE ----");
    scanPattern(absoluteSwitch.data(), absoluteSwitch.size(), SWITCH_ABSOLUTE);

    println("# ---- COMPUTED JUMPTABLE ----");
    scanPattern(computedSwitch.data(), computedSwitch.size(), SWITCH_COMPUTED);

    println("# ---- OFFSETED JUMPTABLE ----");
    scanPattern(byteOffsetSwitch.data(), byteOffsetSwitch.size(), SWITCH_BYTEOFFSET);
    scanPattern(wordOffsetSwitch.data(), wordOffsetSwitch.size(), SWITCH_SHORTOFFSET);

    std::ofstream f(argv[2]);
    f.write(out.data(), out.size());

    uint8_t restgprlr_14_sig[4] = { 0xe9, 0xc1, 0xff, 0x68 };
    searchSignature(image, restgprlr_14_sig, 4, "restgprlr_14_address");
    uint8_t savegprlr_14_sig[4] = { 0xf9, 0xc1, 0xff, 0x68 };
    searchSignature(image, savegprlr_14_sig, 4, "savegprlr_14_address");
    uint8_t restfpr_14_sig[4] = { 0xc9, 0xcc, 0xff, 0x70 };
    searchSignature(image, restfpr_14_sig, 4, "restfpr_14_address");
    uint8_t savefpr_14_sig[4] = { 0xd9, 0xcc, 0xff, 0x70 };
    searchSignature(image, savefpr_14_sig, 4, "savefpr_14_address");
    uint8_t restvmx_14_sig[8] = { 0x39, 0x60, 0xfe, 0xe0, 0x7d, 0xcb, 0x60, 0xce };
    searchSignature(image, restvmx_14_sig, 8, "restvmx_14_address");
    uint8_t savevmx_14_sig[8] = { 0x39, 0x60, 0xfe, 0xe0, 0x7d, 0xcb, 0x61, 0xce };
    searchSignature(image, savevmx_14_sig, 8, "savevmx_14_address");
    uint8_t restvmx_64_sig[8] = { 0x39, 0x60, 0xfc, 0x00, 0x10, 0x0b, 0x60, 0xcb };
    searchSignature(image, restvmx_64_sig, 8, "restvmx_64_address");
    uint8_t savevmx_64_sig[8] = { 0x39, 0x60, 0xfc, 0x00, 0x10, 0x0b, 0x61, 0xcb };
    searchSignature(image, savevmx_64_sig, 8, "savevmx_64_address");

    return EXIT_SUCCESS;
}
